import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as e,c as t,a as i,b as s,e as h,w as k,f as p,g as d}from"./app-CEyC5ZUE.js";const r={},c=i("h1",{id:"修饰符",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#修饰符"},[i("span",null,"修饰符")])],-1),A=d(`<p>在 Solidity 中，<strong>修饰符（Modifiers）</strong> 是一种用于修改函数行为的结构，常用于在函数执行前添加条件检查、权限控制或其他逻辑，以确保合约的安全性和健壮性。修饰符可以减少代码的重复，增加代码的可读性。</p><h2 id="修饰符的基本用法" tabindex="-1"><a class="header-anchor" href="#修饰符的基本用法"><span>修饰符的基本用法</span></a></h2><p>使用 <code>modifier</code> 关键字定义修饰符，可以在函数执行之前或之后插入一些额外的逻辑。修饰符最常见的用途是 <strong>权限控制</strong> 和 <strong>前置条件检查</strong>。</p><h3 id="修饰符的语法" tabindex="-1"><a class="header-anchor" href="#修饰符的语法"><span>修饰符的语法：</span></a></h3><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">modifier</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> modifier_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 前置条件或逻辑</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 后置逻辑（可选）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>modifier_name</code></strong>：修饰符的名称。</li><li><strong><code>_</code></strong>：特殊占位符，表示修饰符应用的函数体。当执行修饰符时，函数的主体会插入到这个位置。</li></ul><h2 id="修饰符的常见应用" tabindex="-1"><a class="header-anchor" href="#修饰符的常见应用"><span>修饰符的常见应用</span></a></h2><h3 id="权限控制修饰符" tabindex="-1"><a class="header-anchor" href="#权限控制修饰符"><span>权限控制修饰符</span></a></h3><p>常见的修饰符用于检查调用者是否有权限执行特定操作。例如，确保只有合约拥有者能够调用某些关键函数。</p><h3 id="示例-onlyowner-修饰符" tabindex="-1"><a class="header-anchor" href="#示例-onlyowner-修饰符"><span>示例：<code>onlyOwner</code> 修饰符</span></a></h3><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Ownable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    address</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> owner;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        owner </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 定义 onlyOwner 修饰符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    modifier</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onlyOwner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == owner, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Not the contract owner&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 当上面的语句验证通过后，执行函数体，如果不通过，输出错误信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 只有拥有者可以调用此函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> restrictedFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onlyOwner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 函数逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>onlyOwner</code> 修饰符确保只有合约的拥有者才能调用 <code>restrictedFunction</code> 函数。修饰符通过 <code>require</code> 函数来检查条件是否成立，如果条件不成立，则抛出异常。</p><h3 id="参数化修饰符" tabindex="-1"><a class="header-anchor" href="#参数化修饰符"><span>参数化修饰符</span></a></h3><p>修饰符也可以接受参数，用来进一步灵活控制函数的行为。</p><h3 id="示例-带参数的修饰符" tabindex="-1"><a class="header-anchor" href="#示例-带参数的修饰符"><span>示例：带参数的修饰符</span></a></h3><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Token</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    address</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> owner;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    mapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> balances;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        owner </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 定义一个带参数的修饰符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    modifier</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> minBalance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(balances[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _amount, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Insufficient balance&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 执行函数体</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 只有在用户余额足够时才能调用该函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> withdraw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> minBalance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        balances[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _amount;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        payable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">transfer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(_amount);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>minBalance</code> 修饰符检查用户的余额是否足够大，只有在余额大于或等于 <code>_amount</code> 时，<code>withdraw</code> 函数才会被执行。</p><h2 id="多个修饰符的使用" tabindex="-1"><a class="header-anchor" href="#多个修饰符的使用"><span>多个修饰符的使用</span></a></h2><p>Solidity 允许将多个修饰符应用到同一个函数中，修饰符会按顺序依次执行。</p><h3 id="示例-组合修饰符" tabindex="-1"><a class="header-anchor" href="#示例-组合修饰符"><span>示例：组合修饰符</span></a></h3><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Token</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    address</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> owner;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    bool</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> locked;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    mapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> balances;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        owner </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 仅允许拥有者调用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    modifier</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onlyOwner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == owner, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Not the owner&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 仅在合约未锁定的情况下运行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    modifier</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> notLocked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(!locked, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Contract is locked&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 组合修饰符：仅允许拥有者在合约未锁定时调用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onlyOwner</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> notLocked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        locked </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>unlock</code> 函数只能在满足 <code>onlyOwner</code> 和 <code>notLocked</code> 两个修饰符的条件时执行。</p><h2 id="修饰符的前后置逻辑" tabindex="-1"><a class="header-anchor" href="#修饰符的前后置逻辑"><span>修饰符的前后置逻辑</span></a></h2><p>修饰符不仅可以在函数执行之前检查条件，也可以在函数执行之后插入逻辑。前置逻辑在占位符 <code>_</code> 之前编写，后置逻辑则写在 <code>_</code> 之后。</p><h3 id="示例-带后置逻辑的修饰符" tabindex="-1"><a class="header-anchor" href="#示例-带后置逻辑的修饰符"><span>示例：带后置逻辑的修饰符</span></a></h3><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    uint256</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lastExecuted;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 定义一个修饰符，记录函数执行的时间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    modifier</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timeTracker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        lastExecuted </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.timestamp;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 在函数执行后记录时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 使用 timeTracker 修饰符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> executeAction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timeTracker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 函数逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，修饰符 <code>timeTracker</code> 允许函数执行完后再记录执行的时间。</p><h2 id="修饰符的优势" tabindex="-1"><a class="header-anchor" href="#修饰符的优势"><span>修饰符的优势</span></a></h2><ul><li><strong>代码复用</strong>：修饰符可以将公共的条件检查逻辑抽象出来，避免重复编写相同的代码。</li><li><strong>提高可读性</strong>：修饰符让代码更具模块化，逻辑清晰，避免在函数中夹杂复杂的条件判断。</li><li><strong>增强安全性</strong>：通过修饰符可以方便地实现权限控制、前置条件验证等功能，确保合约的安全性。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这一节我们详细介绍了修饰符的使用和特点。修饰符就像一个个拥有某个单一功能的函数，被封装起来，在函数执行的时候，按照指定的顺序执行。既可以使用代码逻辑清晰，又可以减少冗余代码。合理使用修饰符会让我们写的代码更好维护。</p>`,31);function g(o,B){const a=l("RouteLink");return e(),t("div",null,[c,i("p",null,[s("在"),h(a,{to:"/solidity/1-7.%E5%87%BD%E6%95%B0.html"},{default:k(()=>[s("函数")]),_:1}),s("那一节中，也有提到修饰符，但只是简单介绍了一下。在这一节中，我们详细介绍一下修饰符的特点和作用。")]),p(" more "),A])}const u=n(r,[["render",g],["__file","1-10.修饰符.html.vue"]]),m=JSON.parse('{"path":"/solidity/1-10.%E4%BF%AE%E9%A5%B0%E7%AC%A6.html","title":"10.修饰符","lang":"zh-CN","frontmatter":{"title":"10.修饰符","date":"2024-09-12T00:00:00.000Z","categories":["Solidity"],"author":"花千树","description":"在函数那一节中，也有提到修饰符，但只是简单介绍了一下。在这一节中，我们详细介绍一下修饰符的特点和作用。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/solidity/1-10.%E4%BF%AE%E9%A5%B0%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"花千树"}],["meta",{"property":"og:title","content":"10.修饰符"}],["meta",{"property":"og:description","content":"在函数那一节中，也有提到修饰符，但只是简单介绍了一下。在这一节中，我们详细介绍一下修饰符的特点和作用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-12T15:11:13.000Z"}],["meta",{"property":"article:author","content":"花千树"}],["meta",{"property":"article:published_time","content":"2024-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-12T15:11:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10.修饰符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-12T15:11:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"花千树\\"}]}"]]},"headers":[{"level":2,"title":"修饰符的基本用法","slug":"修饰符的基本用法","link":"#修饰符的基本用法","children":[{"level":3,"title":"修饰符的语法：","slug":"修饰符的语法","link":"#修饰符的语法","children":[]}]},{"level":2,"title":"修饰符的常见应用","slug":"修饰符的常见应用","link":"#修饰符的常见应用","children":[{"level":3,"title":"权限控制修饰符","slug":"权限控制修饰符","link":"#权限控制修饰符","children":[]},{"level":3,"title":"示例：onlyOwner 修饰符","slug":"示例-onlyowner-修饰符","link":"#示例-onlyowner-修饰符","children":[]},{"level":3,"title":"参数化修饰符","slug":"参数化修饰符","link":"#参数化修饰符","children":[]},{"level":3,"title":"示例：带参数的修饰符","slug":"示例-带参数的修饰符","link":"#示例-带参数的修饰符","children":[]}]},{"level":2,"title":"多个修饰符的使用","slug":"多个修饰符的使用","link":"#多个修饰符的使用","children":[{"level":3,"title":"示例：组合修饰符","slug":"示例-组合修饰符","link":"#示例-组合修饰符","children":[]}]},{"level":2,"title":"修饰符的前后置逻辑","slug":"修饰符的前后置逻辑","link":"#修饰符的前后置逻辑","children":[{"level":3,"title":"示例：带后置逻辑的修饰符","slug":"示例-带后置逻辑的修饰符","link":"#示例-带后置逻辑的修饰符","children":[]}]},{"level":2,"title":"修饰符的优势","slug":"修饰符的优势","link":"#修饰符的优势","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1726153873000,"updatedTime":1726153873000,"contributors":[{"name":"huaqianshu","email":"huaqianshu.lm@gmail.com","commits":1}]},"readingTime":{"minutes":3.9,"words":1171},"filePathRelative":"solidity/1-10.修饰符.md","localizedDate":"2024年9月12日","excerpt":"\\n<p>在<a href=\\"/solidity/1-7.%E5%87%BD%E6%95%B0.html\\" target=\\"_blank\\">函数</a>那一节中，也有提到修饰符，但只是简单介绍了一下。在这一节中，我们详细介绍一下修饰符的特点和作用。</p>\\n","autoDesc":true}');export{u as comp,m as data};
