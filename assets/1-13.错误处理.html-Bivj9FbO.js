import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,g as e}from"./app-Cog72NFS.js";const n={},l=e(`<h1 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h1><p>在 Solidity 中，错误处理是确保合约执行过程中避免不安全行为的重要机制。通过适当的错误处理，可以防止意外的状态更改、资金损失以及其他潜在的安全问题。<!-- more --> 当出现异常情况时，可以通过错误处理机制让合约停止执行，返回错误信息，并将未完成的交易回滚。</p><h2 id="solidity-中的错误处理机制" tabindex="-1"><a class="header-anchor" href="#solidity-中的错误处理机制"><span>Solidity 中的错误处理机制</span></a></h2><p>Solidity 提供了三种主要的错误处理方式：</p><ul><li><code>require()</code></li><li><code>assert()</code></li><li><code>revert()</code></li></ul><p>它们用于在合约中不同的场景下处理错误，确保合约的正确执行。</p><h2 id="require" tabindex="-1"><a class="header-anchor" href="#require"><span><code>require()</code></span></a></h2><p><code>require()</code> 用于验证输入条件或外部调用是否满足某些要求。如果条件不满足，<code>require()</code> 会触发错误并撤消之前的修改，同时返还剩余的 <code>gas</code>。</p><p>用法：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(条件, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;错误信息&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果 <code>条件</code> 为 <code>false</code>，则会撤销之前的修改，并显示指定的 <code>错误信息</code>。</li><li><code>require()</code> 常用于输入参数验证、权限控制或外部调用结果检查。</li></ul><p>示例：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    address</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> owner;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        owner </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 只有合约的所有者才能调用该函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onlyOwner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == owner, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;You are not the owner&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>require()</code> 用于确保只有合约的所有者可以调用 <code>onlyOwner()</code> 函数。如果非所有者调用该函数，交易将回滚，并显示错误信息 &quot;You are not the owner&quot;。</p><h2 id="assert" tabindex="-1"><a class="header-anchor" href="#assert"><span><code>assert()</code></span></a></h2><p><code>assert()</code> 用于检测合约中的逻辑错误，通常用于检查不应该发生的内部错误或不可恢复的条件。如果 <code>assert()</code> 失败，整个交易将撤销修改，并且会消耗所有剩余的 <code>gas</code>。</p><ul><li><code>assert()</code> 应该只用于检查代码的内部逻辑错误，它的使用意味着如果它失败了，代表存在严重的错误。</li><li>它的失败通常意味着合约有漏洞或存在编程错误。</li></ul><p>用法：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(条件);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    uint256</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> totalSupply;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> incrementSupply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        totalSupply </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 使用 assert 来确保总供应量的值不会溢出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(totalSupply &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>assert()</code> 用于检查 <code>totalSupply</code> 是否总是大于零。由于 Solidity 0.8 版本后自动检测溢出，这个 <code>assert</code> 在逻辑层面上主要用于确保程序状态的正确性。</p><h2 id="revert" tabindex="-1"><a class="header-anchor" href="#revert"><span><code>revert()</code></span></a></h2><p><code>revert()</code> 手动触发回滚，并返回自定义的错误消息。它通常与复杂条件结合使用，当条件不满足时，直接通过 <code>revert()</code> 返回错误。</p><ul><li><code>revert()</code> 可以直接使用，也可以和 <code>if</code> 语句结合。</li></ul><p>用法：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">revert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;错误信息&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> checkValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> pure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (value &lt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            revert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Value is too low&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，如果传入的 <code>value</code> 小于 10，则通过 <code>revert()</code> 触发错误，并回滚交易。</p><h2 id="自定义错误-solidity-0-8-4-引入" tabindex="-1"><a class="header-anchor" href="#自定义错误-solidity-0-8-4-引入"><span>自定义错误（Solidity 0.8.4 引入）</span></a></h2><p>自定义错误是一种新的错误处理机制，提供了一种更节省 <code>gas</code> 的方式来处理错误。与 <code>require()</code> 和 <code>revert()</code> 直接返回字符串不同，自定义错误通过定义错误类型，并在触发时附带相应的错误信息。</p><p>用法：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">error</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> reason);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    error</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InsufficientBalance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> available, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> required);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> withdraw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">        uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> balance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 假设余额为 100</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (balance &lt; amount) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            revert</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> InsufficientBalance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(balance, amount);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>InsufficientBalance</code> 自定义错误提供了更详细的错误信息，同时比传统的错误处理方式节省 <code>gas</code>。</p><h2 id="错误处理的场景应用" tabindex="-1"><a class="header-anchor" href="#错误处理的场景应用"><span>错误处理的场景应用</span></a></h2><h4 id="输入验证" tabindex="-1"><a class="header-anchor" href="#输入验证"><span>输入验证</span></a></h4><p>使用 <code>require()</code> 来验证函数输入是否合法。</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(_age &gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Age must be positive&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 其他逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制"><span>权限控制</span></a></h4><p>通过 <code>require()</code> 来限制函数调用权限。</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">modifier</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onlyOwner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == owner, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Not the owner&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="合约内部状态检查" tabindex="-1"><a class="header-anchor" href="#合约内部状态检查"><span>合约内部状态检查</span></a></h4><p>使用 <code>assert()</code> 来检查合约的内部逻辑是否正常。</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> burn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    totalSupply </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _amount;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(totalSupply &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手动回滚" tabindex="-1"><a class="header-anchor" href="#手动回滚"><span>手动回滚</span></a></h4><p>通过 <code>revert()</code> 手动触发回滚。</p><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transfer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (balances[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">msg.sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] &lt; _amount) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        revert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Insufficient balance&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 其他逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误处理和-gas-消耗" tabindex="-1"><a class="header-anchor" href="#错误处理和-gas-消耗"><span>错误处理和 <code>gas</code> 消耗</span></a></h2><ul><li>使用 <code>require()</code> 和 <code>revert()</code> 会返还剩余的 <code>gas</code>，因此适合处理外部输入验证和条件检查。</li><li>使用 <code>assert()</code> 会消耗所有的剩余 <code>gas</code>，因此应谨慎使用，仅适用于合约的内部逻辑检查。</li><li>自定义错误是一种更节省 <code>gas</code> 的错误处理方式，推荐在涉及复杂逻辑时使用。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这一节介绍了 Solidity 中的错误处理机制，我们再来简单总结一下：</p><ul><li><strong><code>require()</code></strong>：用来在执行前验证输入和条件，当满足条件时通过，不满足时报错，输出后面的提示。</li><li><strong><code>assert()</code></strong>：用于检查运算结果不应该为 false 的代码。断言失败可能意味着有 bug，用于检查内部逻辑，失败时消耗所有 <code>gas</code>，适用于不应出现的错误情况。</li><li><strong><code>revert()</code></strong>：手动触发回滚，适用于复杂条件检查或错误处理。</li><li><strong>自定义错误</strong>：节省 <code>gas</code> 的新方式，用于定义复杂的错误类型。</li></ul><p>和其他编程语言一样，错误处理也是合约编程中不可或缺的一部分。通过适当的错误处理机制，以保证我们编写的合约更加安全和可靠，有效地避免各种潜在的错误。</p>`,56),t=[l];function h(d,k){return s(),a("div",null,t)}const c=i(n,[["render",h],["__file","1-13.错误处理.html.vue"]]),o=JSON.parse('{"path":"/solidity%E5%9F%BA%E7%A1%80/1-13.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html","title":"1-13.错误处理","lang":"zh-CN","frontmatter":{"title":"1-13.错误处理","date":"2024-09-13T00:00:00.000Z","categories":["Solidity"],"author":"花千树","description":"在 Solidity 中，错误处理是确保合约执行过程中避免不安全行为的重要机制。通过适当的错误处理，可以防止意外的状态更改、资金损失以及其他潜在的安全问题。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/solidity%E5%9F%BA%E7%A1%80/1-13.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"花千树"}],["meta",{"property":"og:title","content":"1-13.错误处理"}],["meta",{"property":"og:description","content":"在 Solidity 中，错误处理是确保合约执行过程中避免不安全行为的重要机制。通过适当的错误处理，可以防止意外的状态更改、资金损失以及其他潜在的安全问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-13T15:08:56.000Z"}],["meta",{"property":"article:author","content":"花千树"}],["meta",{"property":"article:published_time","content":"2024-09-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-13T15:08:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1-13.错误处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-13T15:08:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"花千树\\"}]}"]]},"headers":[{"level":2,"title":"Solidity 中的错误处理机制","slug":"solidity-中的错误处理机制","link":"#solidity-中的错误处理机制","children":[]},{"level":2,"title":"require()","slug":"require","link":"#require","children":[]},{"level":2,"title":"assert()","slug":"assert","link":"#assert","children":[]},{"level":2,"title":"revert()","slug":"revert","link":"#revert","children":[]},{"level":2,"title":"自定义错误（Solidity 0.8.4 引入）","slug":"自定义错误-solidity-0-8-4-引入","link":"#自定义错误-solidity-0-8-4-引入","children":[]},{"level":2,"title":"错误处理的场景应用","slug":"错误处理的场景应用","link":"#错误处理的场景应用","children":[]},{"level":2,"title":"错误处理和 gas 消耗","slug":"错误处理和-gas-消耗","link":"#错误处理和-gas-消耗","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1726240136000,"updatedTime":1726240136000,"contributors":[{"name":"huaqianshu","email":"huaqianshu.lm@gmail.com","commits":1}]},"readingTime":{"minutes":9.07,"words":1360},"filePathRelative":"solidity基础/1-13.错误处理.md","localizedDate":"2024年9月13日","excerpt":"\\n<p>在 Solidity 中，错误处理是确保合约执行过程中避免不安全行为的重要机制。通过适当的错误处理，可以防止意外的状态更改、资金损失以及其他潜在的安全问题。</p>\\n","autoDesc":true}');export{c as comp,o as data};
