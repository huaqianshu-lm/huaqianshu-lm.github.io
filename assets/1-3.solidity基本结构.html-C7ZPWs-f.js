import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as l,a as t,g as n}from"./app-B1K1yjnX.js";const e={},h=t("p",null,"在学习 Solidity 之前，我们先来了解一下 Solidity 的基本结构，也就是一个 Solidity 文件都包含哪些部分。",-1),d=n(`<h2 id="solidity-基本结构" tabindex="-1"><a class="header-anchor" href="#solidity-基本结构"><span>Solidity 基本结构</span></a></h2><p>每个 Solidity 文件通常由以下几个部分组成：</p><ul><li>版本声明：指定 Solidity 编译器的版本。</li><li>合约定义：包含合约的名称和主体部分。</li><li>状态变量：用于存储合约中的持久性数据。</li><li>函数：定义合约中的操作逻辑。</li><li>事件：用于记录合约的操作日志。</li></ul><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 指定编译器版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 通过 contract 关键字定义一个名为 MyContract 的合约</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyContract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 状态变量</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">    uint</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> myNumber;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 构造函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _initialNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        myNumber </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _initialNumber;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _newNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        myNumber </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _newNumber;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 事件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    event</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NumberUpdated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> oldNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> newNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量定义" tabindex="-1"><a class="header-anchor" href="#变量定义"><span>变量定义</span></a></h2><p>状态变量是 Solidity 合约中用于存储持久性数据的变量。状态变量的定义包含以下几个部分：</p><ul><li>数据类型：变量的类型，比如 <code>uint</code>、<code>bool</code>、<code>address</code>、<code>string</code>等。</li><li>访问控制-权限修饰符：变量的访问权限，可以是 <code>public</code>、<code>private</code>、<code>internal</code>、<code>external</code>。</li><li>变量名：变量的名称。</li><li>初始值：变量的初始值，可以是常量或表达式。</li></ul><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 数据类型  访问控制   变量名    = 初始值;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">   uint</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   myNumber  </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h2><p>构造函数是合约的入口点，在合约被部署时，构造函数会被调用。构造函数的定义包含以下几个部分：</p><ul><li>函数名：构造函数的名称，必须为 <code>constructor</code>。</li><li>参数列表：构造函数可以有参数，参数列表中可以指定参数的类型和名称。</li><li>函数体：构造函数的主体部分，用于初始化合约的状态变量。</li></ul><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 函数名   (参数列表) </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _initialNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 函数体</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    myNumber </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _initialNumber;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的定义" tabindex="-1"><a class="header-anchor" href="#函数的定义"><span>函数的定义</span></a></h2><p>函数是Solidity合约的核心，合约中的所有操作都需要通过函数来实现。函数的定义包含以下几个部分：</p><ul><li><code>function</code> 关键字：声明函数的开始。</li><li>函数名：函数的名称。</li><li>参数列表：函数可以有参数，参数列表中可以指定参数的类型和名称。</li><li>访问控制-权限修饰符：函数的访问权限，可以是 <code>public</code>、<code>private</code>、<code>internal</code>、<code>external</code>等。</li><li>返回值：函数可以返回值，返回值的数据类型必须在参数列表中声明。</li><li>函数体：函数的主体部分，用于实现函数的功能。</li></ul><div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//函数声明关键字  函数名   (参数列表)          权限修饰符 返回关键字  返回值类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        setNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> _newNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  returns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">uint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 函数体</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    myNumber </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _newNumber;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> myNumber;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本文介绍了 Solidity 的基本结构，包括版本声明、合约定义、状态变量、函数、事件等。以及状态变量、构造函数、函数的定义。先简单介绍这几个部分，刚开始接触的同学可以先在编辑器中敲一些代码，熟悉一下 Solidity 的基本结构。后续文章将详细介绍 Solidity 的语法和用法。</p>`,18);function k(p,r){return s(),a("div",null,[h,l(" more "),d])}const y=i(e,[["render",k],["__file","1-3.solidity基本结构.html.vue"]]),A=JSON.parse('{"path":"/solidity/1-3.solidity%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.html","title":"3.solidity 的基本结构","lang":"zh-CN","frontmatter":{"title":"3.solidity 的基本结构","date":"2024-09-03T00:00:00.000Z","categories":["Solidity"],"author":"花千树","description":"在学习 Solidity 之前，我们先来了解一下 Solidity 的基本结构，也就是一个 Solidity 文件都包含哪些部分。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/solidity/1-3.solidity%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"花千树"}],["meta",{"property":"og:title","content":"3.solidity 的基本结构"}],["meta",{"property":"og:description","content":"在学习 Solidity 之前，我们先来了解一下 Solidity 的基本结构，也就是一个 Solidity 文件都包含哪些部分。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-04T15:17:49.000Z"}],["meta",{"property":"article:author","content":"花千树"}],["meta",{"property":"article:published_time","content":"2024-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-04T15:17:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.solidity 的基本结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-04T15:17:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"花千树\\"}]}"]]},"headers":[{"level":2,"title":"Solidity 基本结构","slug":"solidity-基本结构","link":"#solidity-基本结构","children":[]},{"level":2,"title":"变量定义","slug":"变量定义","link":"#变量定义","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":2,"title":"函数的定义","slug":"函数的定义","link":"#函数的定义","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1725463069000,"updatedTime":1725463069000,"contributors":[{"name":"limiao","email":"limiao@casicyber.com","commits":1}]},"readingTime":{"minutes":2.62,"words":787},"filePathRelative":"solidity/1-3.solidity基本结构.md","localizedDate":"2024年9月3日","excerpt":"<p>在学习 Solidity 之前，我们先来了解一下 Solidity 的基本结构，也就是一个 Solidity 文件都包含哪些部分。</p>\\n","autoDesc":true}');export{y as comp,A as data};
