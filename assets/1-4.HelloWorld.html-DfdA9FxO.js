import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,f as t,a as i,g as a}from"./app-CEyC5ZUE.js";const n="/assets/0-D4Z80HTw.png",o="/assets/1-C0EEq8IM.png",r={},d=i("h1",{id:"_1-5-hello-world",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_1-5-hello-world"},[i("span",null,"1.5 Hello World")])],-1),p=i("p",null,"前面几节介绍了 Solidity 的开发环境和基本语法规则，接下来我们来编写第一个 Solidity 的 Hello World。",-1),h=a(`<div class="language-solidity line-numbers-mode" data-highlighter="shiki" data-ext="solidity" data-title="solidity" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 声明 Solidity 编译器版本</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pragma</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ^0.8.0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 定义一个智能合约</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">contract</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 一个 public 函数，返回 &quot;Hello, World!&quot; 字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> pure</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> returns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> memory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>首先，声明了 Solidity 编译器版本，这里使用 <code>^0.8.0</code> 版本，表示该合约可以使用 0.8.0 及更高的小版本编译。。</p></li><li><p>然后，定义了一个智能合约 <code>HelloWorld</code>，里面有一个 public 函数 <code>sayHello</code>，这个函数没有参数，返回值为 string 类型。</p></li><li><p>在 <code>sayHello</code> 函数中，我们直接返回了字符串 <code>&quot;Hello, World!&quot;</code>。</p></li><li><p>最后，我们编译并部署这个智能合约，然后调用 <code>sayHello</code> 函数，输出结果为 <code>&quot;Hello, World!&quot;</code>。</p></li></ol><p>下面我们就在 Remix IDE 中试一下。</p><p>首先，我们在 contract 目录下新建一个文件，命名为 <code>HelloWorld.sol</code>，然后输入上面的代码。</p><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后，点击左上角的编译按钮，编译成功后，点击左上角的部署按钮，部署成功后，点击 <code>sayHello</code> 函数，可以看到返回结果为 <code>&quot;Hello, World!&quot;</code>。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到此一个简单的 Hello World 程序就编写完成了。打开 <a href="https://remix.ethereum.org/" target="_blank" rel="noopener noreferrer">Remix IDE</a> ，开始动手吧！</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这一节终于开始进入写代码的环节了，我们编写了第一个 Solidity 程序，并在 Remix IDE 中测试运行。 建议大家代码不要直接复制粘贴，要自己敲一遍，这样可以加深印象，并且可以更好的理解并尽快熟悉 Solidity 的语法。</p>',10);function c(k,y){return e(),l("div",null,[d,p,t(" more "),h])}const u=s(r,[["render",c],["__file","1-4.HelloWorld.html.vue"]]),A=JSON.parse('{"path":"/solidity/1-4.HelloWorld.html","title":"4.Hello World","lang":"zh-CN","frontmatter":{"title":"4.Hello World","date":"2024-09-05T00:00:00.000Z","categories":["Solidity"],"author":"花千树","description":"前面几节介绍了 Solidity 的开发环境和基本语法规则，接下来我们来编写第一个 Solidity 的 Hello World。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/solidity/1-4.HelloWorld.html"}],["meta",{"property":"og:site_name","content":"花千树"}],["meta",{"property":"og:title","content":"4.Hello World"}],["meta",{"property":"og:description","content":"前面几节介绍了 Solidity 的开发环境和基本语法规则，接下来我们来编写第一个 Solidity 的 Hello World。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-05T15:29:18.000Z"}],["meta",{"property":"article:author","content":"花千树"}],["meta",{"property":"article:published_time","content":"2024-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-05T15:29:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.Hello World\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-05T15:29:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"花千树\\"}]}"]]},"headers":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1725550158000,"updatedTime":1725550158000,"contributors":[{"name":"huaqianshu","email":"huaqianshu.lm@gmail.com","commits":1}]},"readingTime":{"minutes":1.43,"words":429},"filePathRelative":"solidity/1-4.HelloWorld.md","localizedDate":"2024年9月5日","excerpt":"\\n<p>前面几节介绍了 Solidity 的开发环境和基本语法规则，接下来我们来编写第一个 Solidity 的 Hello World。</p>\\n","autoDesc":true}');export{u as comp,A as data};
